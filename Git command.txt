# Basic Commands   
cd someproject  
git init # turn this directory into a git directory  
git add . # take a git snapshot of all the files in this directory, add them to a git index  
git rm somefile # remove file from index and filesystem  
git rm --cached # remove file from index ONLY  
git add file1 file2 file3 # add updated files to the git index  
git commit # save the current state of the git index, this will prompt you for a message  
git commit -a # save all files, edited/deleted in the current state of the git index, this will prompt you for a message  
git diff  # see what pending changes that will be made in the next commit  
git diff --cached # see what changes will be made in the next commit  
git status # get a brief summary about changes to the index, etc.  
git log # view history of your changes  
git log -p # view changes at each commit  
git log --stat --summary # get an overview of the changes in each commit  
git revert [commit number] # revert back to a particular version  
  
# Branch Management  
git branch # see all branches of development  
git branch new_version # create a new branch of development  
git checkout new_version # switch to the new branch  
git merge new_version # merge the changes from new_version into the master branch  
git diff # if there's any conflicts with the merge, they'll show up here.  
git commit # don't forget to commit the merge!  
gitk # shows a representation of the merge.   
git branch -d new_version # delete the other branch, and ensure that the branch changes were merged  
git branch -D stupid_version # delete a branch forver.  
git status # show summary of pending commits  
  
# Collaborative Commands  
git clone /path/to/some_other_project myproject # clone an existing project, including all branches(all non-master branches are hidden)  
git branch -a # show all branches including hidden branches(which are usually stored in origin/[branch name]  
git pull /path/to/some_other_project new_version # pull changes from an existing git repository and merge them into a branch  
git fetch /path/to/some_other_project master # pull changes from an existing repository without merging  
git log -p HEAD..FETCH_HEAD # check the get log for differences between current version and fetched version  
gitk HEAD..FETCH_HEAD # nice visual representation between the two   
git remote add some_other_project /path/to/some_other_project # define a remote repository shortcut, stored in some_other_project/master  
git fetch some_other_project # import changes from remote repository  
git merge some_other_project/master # merge changes   
  
# Other Useful Commands   
git gc --aggressive # clean up git repository  
git [any command] --help # get help with a command  
git rm --cached filename # remove file from cache  
  
# Git Ignore  
git config --global core.excludesfile ~/.gitignore_global # add global git ignore file(with regexp support) to the index  
- See more at: http://blog.hulihanapplications.com/browse/view/44-useful-git-commands#sthash.1gWYAoaG.dpuf